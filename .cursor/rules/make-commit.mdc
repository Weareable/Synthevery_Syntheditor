---
description:
globs:
alwaysApply: false
---

## コミットの作成
ユーザーから、現在の作業内容を保存(コミット)するように指示された場合、以下の手順でコミットを作成してください。

1. 作業内容を確認する
2. 適切な粒度で作業内容を区切る
3. コミットメッセージの計画を立てる
4. コミットメッセージをユーザーに確認する
5. コミットを作成する

## 注意点
- **git initは実行しないでください。既にリポジトリは初期化されています。**
  - not a git repositoryエラーが生じた場合は、適切な場所にcdしてからgitの操作を行ってください。
- 作業内容を確認する際は、git --no-pager diffを実行してください。
  - --no-pagerは、git diffの出力をページャーではなく標準出力にするためのオプションです。これを必ず付け、作業を続行してください。
- logにおいても、--no-pagerを付けてください。(git --no-pager log)

## Git コミットメッセージのルール
コミットメッセージを生成する際は以下に従ってください：
- **必ずプレフィックスを使用** (add, feat, fix, docs, style, refactor, test, chore)
- メインメッセージは50文字以内（プレフィックス含む）
- プレフィックス後は命令形を使用
- 具体的かつ簡潔に
- 末尾にピリオドは付けない
- プレフィックス後にセミコロンをつけない
  - 正解例: `add ファイルを追加`
  - 誤り例: `add: ファイルを追加`
- プレフィックスとメッセージはスペースで区切る
- 形式: `prefix message`
  - 例: `add ファイルを追加`
  - 例: `feat 新機能を追加`
  - 例: `fix バグを修正`
  - 例: `docs ドキュメントを更新`
  - 例: `style コードのスタイルを修正`
  - 例: `refactor コードをリファクタリング`
  - 例: `test テストを追加`
  - 例: `chore ビルドプロセスを更新`
- **言語**: コミットメッセージは常に日本語を使用

### プレフィックスルール:
- `add` ファイル追加
- `feat` 新機能
- `fix` バグ修正
- `docs` ドキュメントのみの変更
- `style` コードの意味に影響を与えない変更（空白、フォーマット、セミコロンなど）
- `refactor` バグ修正や機能追加のないコードの変更
- `test` テストの追加・修正
- `chore` ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

### コードコメント言語:
- 日本語プロジェクトのため、コメントは日本語で記述